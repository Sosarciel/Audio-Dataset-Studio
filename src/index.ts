import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent, nativeTheme } from "electron";
import { BridgeBackend } from "./Backend";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            webSecurity: false,
            allowRunningInsecureContent: true,
        },
    });

    mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
        callback({
            responseHeaders: {
                ...details.responseHeaders,
                "Content-Security-Policy": [],
            },
        });
    });

    // and load the index.html of the app.
    void mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    mainWindow.webContents.openDevTools();
    mainWindow.webContents.on("devtools-opened", () => {
        // First, set the theme to 'light'
        nativeTheme.themeSource = "light";
        // After a short delay, set it to 'dark'
        setTimeout(() => {
            nativeTheme.themeSource = "system";
        }, 100); // 100ms delay; adjust if necessary
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0)
        createWindow();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


//#region function define
//链接IPC与后端桥对象
Object.entries(BridgeBackend).forEach(([k, v]) => ipcMain.handle(k, v));
ipcMain.handle('getBridgeKeys', () => Object.keys(BridgeBackend));

type RemoveIpcEventArg<T> =
    T extends (arg1: IpcMainInvokeEvent, ...args: infer Rest) => infer R
        ? (...args: Rest) => R : T;

/**前端桥对象定义 */
export type BridgeDefine = {
    [P in keyof BridgeBackend]: BridgeBackend[P] extends (...args: infer Arg) => infer Out
        ? RemoveIpcEventArg<(...args: Arg) => Out extends Promise<any> ? Out : Promise<Out>>
        : never;
};
//#endregion